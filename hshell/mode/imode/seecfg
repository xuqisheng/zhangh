#!/bin/bash
#---------------------------------------------------------------------------------
# 
# --------------------------------------------------------------------------------
# -t
# -B 
# -B -N
# --------------------------------------------------------------------------------

# get options

HOPTIONS=""
while (echo "'$1'"  | grep -E  -e "^'-" > /dev/null)
do
   HOPTIONS="$HOPTIONS$1"
   shift 
done

# get mysql server ip 

. /root/mode/mysqldip

# set option 

if echo "'$HOPTIONS" | grep -E -e "-s" >/dev/null; then
   HSMODE="-s"
   HMODE='-B -N -q'
elif echo "'$HOPTIONS" | grep -E -e "-c" >/dev/null; then
   HSMODE="-c"
   HMODE='-B -q'
elif echo "'$HOPTIONS" | grep -E -e "-z" >/dev/null; then
   HSMODE="-z"
   HMODE='-B -N -q'
else
   HSMODE=""
   HMODE='-t'
fi
if echo "'$HOPTIONS" | grep -E -e "-P" >/dev/null; then
   Hmodepass=
fi

HDBNAME=mysql
[ -n "$2" ] && HDBNAME="$2"

# test connectivity and database existence

HTESTERR=`echo | mysql -uroot $Hmodepass -h$HMYSQLDIP --default-character-set=utf8 $HMODE "$HDBNAME"  2>&1`
if [ -n "$HTESTERR" ]; then
   if echo $HTESTERR | grep -E  "mysql: command not found" > /dev/null; then
      /root/mode/modemsg seecfg "MySQL client has not been installed at this machine!" more
      exit 1
   elif echo "$HTESTERR" | grep -E '^ERROR' >/dev/null; then
      if echo $HTESTERR | grep -E  "(Can't connect)" >/dev/null; then
         /root/mode/modemsg seecfg "$HMYSQLDIP2 MySQL server can't be connected!"
      elif echo $HTESTERR | grep -E  "(Access denied)" >/dev/null; then
         /root/mode/modemsg seecfg "$HTESTERR at $HMYSQLDIP2 MySQL server"
      elif echo $HTESTERR | grep "Unknown database" >/dev/null; then
         /root/mode/modemsg seecfg "No database $HDBNAME at $HMYSQLDIP2 MySQL server!"
      else
         /root/mode/modemsg seecfg "$HTESTERR"
      fi
      exit 1
   else
      # warning information
      :
   fi
fi

# test if empty statement

if [ -z "$1" ]; then
   /root/mode/modemsg seecfg "^_^ Congratulations!Connection to MySQL server at $HMYSQLDIP2 is OK!" more
   exit 0
fi

# utf8 test
TMPFILE="/root/mode/tmp/hryseecfg$$.sql"
if [ -z "$Hutf8tested" ]; then
   if (echo "$1"  | grep -E  "\.(sql|SQL)$" > /dev/null); then
      if [ ! -f "$1" ]; then
         /root/mode/modemsg seecfg "File $1 doesn't exist !!!"
         exit 1
      fi
      if /root/mode/tfile "$1" | grep -E '(UTF-16|UCS-2)' >/dev/null; then
         # UTF-16  
         # remove wrong CR (which were added after wrong file transfer) before calling tutf8
         cat "$1" | sed -re "s/(.*)\r$/\1/" > "$TMPFILE"
         Hrmtmp=1
      elif /root/mode/tfile "$1" | grep -E '(CR |CR,).*line terminators' >/dev/null; then
         # not UTF-16
         # correct CR terminaters before calling tutf8 
         H1=`cat "$1" | sed -n "$ ="`
         H2=`cat "$1" | sed -re "$ s/$/\n/" | sed -n "$ ="`
         cat "$1" | 
         if [ "$H1" != "$H2" ]; then
            sed -re "s/(.*)\r$/\1HrYhScCr/" | tr "\r" "\n" | sed -re "s/HrYhScCr//"
         else
            sed -re "$ s/$/\n/"| sed -re "s/(.*)\r$/\1HrYhScCr/" | tr "\r" "\n" | sed -re "s/HrYhScCr//"
         fi > "$TMPFILE"
         Hrmtmp=1
      else
         if /root/mode/kpfile "$1"; then
            TMPFILE="$1"
            Hrmtmp=0
         else
            cp -f "$1" "$TMPFILE"
            Hrmtmp=1
         fi
      fi
   else
      echo "$1" > "$TMPFILE"
      Hrmtmp=1
   fi
   if [ $Hrmtmp -eq 1 ]; then
      /root/mode/tutf8 "$TMPFILE" >&2
   fi
   export Hutf8tested=1
else
   if (echo "$1"  | grep -E  "\.(sql|SQL)$" > /dev/null); then
      TMPFILE="$1"
      Hrmtmp=0
   else
      echo "$1" > $TMPFILE
      Hrmtmp=1
   fi
fi


# true recursive method of executing sql is available

while [ 1 ]; do

   # basic check of sql

   if [ -n "$Hnative_execution" ]; then
      break
   elif /root/mode/isdump "$TMPFILE"; then
      # dump sql 
      # direct execution
      break
   elif /root/mode/isblsql "$TMPFILE"; then
      # binlog sql
      # direct execution
      break
   elif ! cat "$TMPFILE" | (LANG=C;grep -n -A 1 -P "^(\xef\xbb\xbf)?/\*[ \t]*[\r]?$") | grep -P  "^[0-9]+-[ \t]*(----each----|---ptmode---):" >/dev/null; then
      # no 'each',no 'ptmode'
      # direct execution
      break
   fi

   # do 'each' segmentation
   # put 'each' segment to $HSEGTMPFILE  

   HSEGTMPFILE=/root/mode/tmp/hsegtmp$$.tmp
   Hend=`sed -n "$ =" "$TMPFILE"`
   [ -z "$Hend" ] && Hend=0
   Heachcnt=`cat "$TMPFILE" | (LANG=C;grep -n -A 1 -P "^(\xef\xbb\xbf)?/\*[ \t]*[\r]?$") | grep -P  "^[0-9]+-[ \t]*----each----:" | wc -l`
   if [ $Heachcnt -gt 0 ]; then
      # do each segmentation
      >$HSEGTMPFILE
      Hstart=1
      for i in `cat "$TMPFILE" | (LANG=C;grep -n -A 1 -P "^(\xef\xbb\xbf)?/\*[ \t]*\r?$")|grep -P "^[0-9]+-[ \t]*----each----:"| sed -re "s/^([0-9]+).*/\1/"`;do 
          i=$[$i-1]
          if [ $Hstart -le $[$i-1] ]; then
             echo "$Hstart,$[$i-1]" >> $HSEGTMPFILE
          fi
          Hstart=$i
      done
      if [ $Hstart -le $Hend ]; then
         echo "$Hstart,$Hend" >> $HSEGTMPFILE
      fi
   else
      echo "1,$Hend" >> $HSEGTMPFILE
   fi

   # do each segmentation
   # dlsql check for each 'each' segment in $HSEGTMPFILE  

   HTMPSQLFILE=/root/mode/tmp/hdlsqln-$$.sql
   Hcomresult=0
   export Hnative_execution
   export iloop  
   for iloop in `cat $HSEGTMPFILE`; do
       iloopb=`echo $iloop | sed -re "s/^([0-9]+).*/\1/"`
       cat "$TMPFILE" | sed -nre "$iloop p" > $HTMPSQLFILE 
       if [ $Heachcnt -gt 0 ]; then
          # set Hnative_execution to null for true recursion
          Hnative_execution=1
          iloopsave=$iloop
          jloopsave=$jloop
          iloop=
          jloop=
          /root/mode/dlsql $HMYSQLDIP "$HDBNAME" "$HTMPSQLFILE"
          Hdlsqlstatus=$?
          iloop=$iloopsave
          jloop=$jloopsave
       else
          Hdlsqlstatus=0
       fi
       if [ $Hdlsqlstatus -eq 0 ]; then
          # do ptmode segmentation 
          # put 'ptmode' segment to $HPT_SEGTMPFILE  
          HPT_SEGTMPFILE=/root/mode/tmp/hpt_segtmp$$.tmp
          >$HPT_SEGTMPFILE
          Hend=`sed -n "$ =" "$HTMPSQLFILE"`
          [ -z "$Hend" ] && Hend=0
          Hptcnt=`cat "$HTMPSQLFILE" | (LANG=C;grep -n -A 1 -P "^(\xef\xbb\xbf)?/\*[ \t]*[\r]?$") | grep -P  "^[0-9]+-[ \t]*---ptmode---:" | wc -l`
          if [ $Hptcnt -gt 0 ]; then
             > $HPT_SEGTMPFILE
             Hstart=1
             for i in `cat "$HTMPSQLFILE" | (LANG=C;grep -n -A 1 -P "^(\xef\xbb\xbf)?/\*[ \t]*\r?$")|grep -P "^[0-9]+-[ \t]*---ptmode---:"| sed -re "s/^([0-9]+).*/\1/";echo $[$Hend+2]`;do
                 i=$[$i-1]
                 if [ $Hstart -le $[$i-1] ]; then
                    Hptseg_total_len=$[$i-$Hstart]
                    Hptseg_real_len=`cat $HTMPSQLFILE | sed -n "$Hstart,$[$i-1] p" | grep -E "\---ptmode---" | wc -l`
                    if [ $Hptseg_real_len -gt 0 ]; then
                       if [ $Hptseg_total_len -gt $[$Hptseg_real_len+2] ]; then
                          # pt && sql 
                          Hptend=`cat $HTMPSQLFILE | sed -n "$Hstart,$[$i-1] p" | grep -Pn "^[ \t]*\*/" | head -n 1 | sed -re "s/([0-9]+).*/\1/"`
                          echo "$[$iloopb+$Hstart-1],$[$iloopb+$Hstart+$Hptend-2]" >> $HPT_SEGTMPFILE
                          echo "$[$iloopb+$Hstart+$Hptend-1],$[$iloopb+$i-2]" >> $HPT_SEGTMPFILE
                       else
                          # pure pt
                          echo "$[$iloopb+$Hstart-1],$[$iloopb+$i-2]" >> $HPT_SEGTMPFILE
                       fi 
                    else
                       # pure sql
                       echo "$[$iloopb+$Hstart-1],$[$iloopb+$i-2]" >> $HPT_SEGTMPFILE
                    fi
                 fi
                 Hstart=$i
             done
          else
             echo "$[$iloopb],$[$iloopb+$Hend-1]" >> $HPT_SEGTMPFILE
          fi
          HPT_TMPSQLFILE=/root/mode/tmp/hpt_dlsqln-$$.sql
          export jloop  
          for jloop in `cat $HPT_SEGTMPFILE`; do
              cat "$TMPFILE" | sed -nre "$jloop p" > $HPT_TMPSQLFILE
              if cat $HPT_TMPSQLFILE | grep -E "\---ptmode---" >/dev/null; then
                 # ptmode segment 
                 Hptmode_part=`cat $HPT_TMPSQLFILE | grep -P "^[ \t]*---ptmode---:" |  sed -re "s/^[ \t]*---ptmode---://" | tr -d "\r\n"`
                 Hptmode_table=`echo $Hptmode_part | sed -re "s/^\[([^]]+)\]\[(.*)\]$/\1/"`
                 Hptmode_alter=`echo $Hptmode_part | sed -re "s/^\[([^]]+)\]\[(.*)\]$/\2/"`
                 if /root/mode/.pt_stat | grep -E '^installed-ok$' >/dev/null; then
                    /root/mode/ptmode $HMYSQLDIP --e --alter "$Hptmode_alter" D="$HDBNAME",t="$Hptmode_table" 1>&2
                    if [ $? -gt 0 ]; then
                       Hcomresult=1
                       /root/mode/modemsg seecfg "Error occurred when executing the ptmode segment($jloop) in sql segment($iloop)"
                       /root/mode/modemsg seecfg "The rest part of sql segment($iloop) will not be executed" less
                       break
                    fi
                 else
                    Hnative_execution=1
                    /root/mode/seecfg $HSMODE $HMYSQLDIP "alter table \`$Hptmode_table\` $Hptmode_alter" "$HDBNAME"
                    if [ $? -gt 0 ]; then
                       Hcomresult=1
                       break
                    fi
                 fi
              else
                 # sql segment 
                 Hnative_execution=1
                 /root/mode/seecfg $HSMODE $HMYSQLDIP $HPT_TMPSQLFILE "$HDBNAME"
                 if [ $? -gt 0 ]; then
                    Hcomresult=1
                    break
                 fi
              fi
          done
       elif [ $Hdlsqlstatus -eq 1 ]; then
          if [ -z "$iloop" ]; then
             /root/mode/modemsg seecfg "Sql was not executed according to precheck result"
          else
             /root/mode/modemsg seecfg "Sql segment($iloop) was not executed according to precheck result"
          fi
       else 
          if [ -z "$iloop" ]; then
             /root/mode/modemsg seecfg "Sql was not executed"
          else
             /root/mode/modemsg seecfg "Sql segment($iloop) was not executed"
          fi
       fi
   done
   rm -f $HTMPSQLFILE 
   rm -f $HSEGTMPFILE 
   rm -f $HPT_TMPSQLFILE 
   rm -f $HPT_SEGTMPFILE 
   if [ $Hrmtmp -eq 1 ]; then
      rm -f "$TMPFILE"
   fi
   exit $Hcomresult
done

# native execution 

Hseecfgmysql=/root/mode/tmp/hseecfgmysql$$.err
# adjust for binlog
if [ "$HNoBiNlOg" = "DaNgEr" ]; then
   cat /root/mode/impfile/mysql/sqllogbin.sql "$TMPFILE" | mysql -uroot $Hmodepass -h$HMYSQLDIP --default-character-set=utf8 $HMODE "$HDBNAME" 2>$Hseecfgmysql 
else
   if [ "$HSMODE" != "-c" -a "$HSMODE" != "-z" ]; then
      mysql -uroot $Hmodepass -h$HMYSQLDIP --default-character-set=utf8 $HMODE "$HDBNAME" < "$TMPFILE" 2>$Hseecfgmysql 
   elif [ "$HSMODE" = "-c" ]; then
      set -o pipefail
      mysql -uroot $Hmodepass -h$HMYSQLDIP --default-character-set=utf8 $HMODE "$HDBNAME" < "$TMPFILE" 2>$Hseecfgmysql | 
      # deal with double quotes
      # tabs and newlines in content are already backslashed
      # tabs which are not backslashed are column separators
      sed -re 's/"/""/g'    |
      sed -re 's/\t/"\t"/g' |
      sed -re 's/^/"/g'     |
      sed -re 's/$/"/g'     |
      sed -re 's/\t/,/g'    | 
      # recover backslashed tabs to real tabs
      sed -re 's/\\t/\t/g'  | 
      # newline -> carriage+newline
      tr -d '\r'            |
      sed -re 's/$/\r/g'    | 
      # recover backslashed newlines
      sed -re 's/\\n/\n/g'  | 
      # add utf8 BOM if neccessary 
      sed -re '1 s/^/\xef\xbb\xbf/' 
   else
      set -o pipefail
      mysql -uroot $Hmodepass -h$HMYSQLDIP --default-character-set=utf8 $HMODE "$HDBNAME" < "$TMPFILE" 2>$Hseecfgmysql | 
      # deal with double quotes
      # tabs and newlines in content are already backslashed
      # tabs which are not backslashed are column separators
      sed -re 's/~/HrYQhF/g'             |
      sed -re 's/"/""/g'                 |
      sed -re 's/\t/~\t~/g'              |
      sed -re 's/^/~/g'                  |
      sed -re 's/$/~/g'                  |
      sed -re 's/\t/,/g'                 |
      sed -re 's/~@@~,~([^~]*)~/"\1"/g'  | 
      sed -re 's/~//g'                   | 
      sed -re 's/HrYQhF/~/g'             |
      # recover backslashed tabs to real tabs
      sed -re 's/\\t/\t/g'  | 
      # newline -> carriage+newline
      tr -d '\r'            |
      sed -re 's/$/\r/g'    | 
      # recover backslashed newlines
      sed -re 's/\\n/\n/g'  | 
      # add utf8 BOM if neccessary 
      iconv -f utf-8 -t gb18030 
   fi
fi
Hreturnstatus=$?
set +o pipefail
if [ $Hreturnstatus -gt 0 ]; then
   if [ -n "$jloop" ]; then
      Herrline=`cat $Hseecfgmysql | sed -re "s/^ERROR [0-9]+ \([^)]+\) at line ([0-9]+):.*/\1/"`
      Hsegbeg=`echo $jloop | sed -re "s/(.*),.*/\1/"`
      Hgline=$[$Herrline+$Hsegbeg-1]
      if [ $Herrline -eq $Hgline ]; then
         /root/mode/modemsg seecfg "`cat $Hseecfgmysql | sed -re \"s/^(ERROR [0-9]+ \([^)]+\) at line )([0-9]+)(:)(.*)/\1$Hgline\3/\"`"
      else
         if [ "$jloop" = "$iloop" ]; then
            /root/mode/modemsg seecfg "`cat $Hseecfgmysql|sed -re \"s/^(ERROR [0-9]+ \([^)]+\) at line )([0-9]+)(:)(.*)/\1$Hgline in sql file \/ line $Herrline in sql segment($iloop)\3/\"`"
         else
            /root/mode/modemsg seecfg "`cat $Hseecfgmysql|sed -re \"s/^(ERROR [0-9]+ \([^)]+\) at line )([0-9]+)(:)(.*)/\1$Hgline in sql file \/ line $Herrline in subsegment($jloop) of sql segment($iloop)\3/\"`"
         fi
      fi
      /root/mode/modemsg seecfg "`cat $Hseecfgmysql | sed -re \"s/^[^:]+: (.*)/\1/\"`" less
      /root/mode/modemsg seecfg "The rest part of sql segment($iloop) will not be executed" less
   else
      /root/mode/modemsg seecfg "`cat $Hseecfgmysql`"
      /root/mode/modemsg seecfg "The rest part of the sql file will not be executed" less
   fi
fi
if [ "$Hmysql_force" != "YeS" ]; then
   # keep the error log when Hmysql_force is on.Hmysql_force mode is used in incremental recovery which is vulnerable 
   rm -f $Hseecfgmysql 
fi
if [ $Hrmtmp -eq 1 ]; then
   rm -f "$TMPFILE"
fi
exit $Hreturnstatus
 
#

