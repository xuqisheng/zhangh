ansible简介

ansible是与puppet、saltstack类似的集群管理工具，其优点是仅需要ssh和Python即可使用，而不像puppet、saltstack那样都需要客户端。
与puppet类似，ansible也支持丰富的功能：
批量执行、支持模块化，支持playbook（相比puppet还是弱些）、上手容易（puppet上手有门槛）、权限控制
安装方法为： yum -y install ansible 或 pip install ansible
在管理集群时，ansible需要先配置集群hosts列表以方便集群操作

ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）
的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。ansible是基于模块工作的，本身没有批量部署的能力。
真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括：
(1)、连接插件connection plugins：负责和被监控端实现通信；
(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；
(3)、各种模块核心模块、command模块、自定义模块；
(4)、借助于插件完成记录日志邮件等功能；
(5)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。

ansible的默认路径:/etc/ansible/

2、特性
(1)、no agents：不需要在被管控主机上安装任何客户端；
(2)、no server：无服务器端，使用时直接运行命令即可；
(3)、modules in any languages：基于模块工作，可使用任意语言开发模块；
(4)、yaml，not code：使用yaml语言定制剧本playbook；
(5)、ssh by default：基于SSH工作；
(6)、strong multi-tier solution：可实现多级指挥。

3、优点
(1)、轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；
(2)、批量任务执行可以写成脚本，而且不用分发到远程就可以执行；
(3)、使用python编写，维护更简单；
(4)、支持sudo。

Playbooks
Playbooks 是 Ansible的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合.
如果 Ansible 模块你是工作室中的工具,那么 playbooks 就是你设置的方案计划.
在基础层面, playbooks 可以被用来管理用于部署到远程主机的配置文件.在更高的层面上,playbooks 可以依次对多层式架构上的服务器执行
上线包括滚动更新在内的操作并可以将操作委托给其他主机包括在此过程中发生的与监视服务器,负载均衡服务器的交互操作在内.

playbooks组成：
  Target section：   定义将要执行 playbook 的远程主机组
  Variable section： 定义 playbook 运行时需要使用的变量
  Task section：     定义将要在远程主机上执行的任务列表
  Handler section：  定义 task 执行完成以后需要调用的任务



ansible 执行格式
    ansible <操作目录> -m <模块名> -a <模块参数>
    ansible-playbook /root/xxx.yml

ansible-doc -l
    查看当前ansible支持哪些模块
ansible-doc -s 模块名
    查看该模块哪些参数可以使用，比如: ansible -s copy


常用模块
    command
        目的：在远程主机上执行命令
    script
        目的：
    shell
        目的：切换到某个shell执行指定的指令，参数与command相同
    raw
    ping
        目的：检查指定节点机器是否还能连通
        命令：ansible 10.1.1.113 -m ping
    copy
        目的：把主控端/root目录下的a.sh文件拷贝到到指定节点上
        命令：ansible 10.1.1.113 -m copy -a 'src=/root/a.sh dest=/tmp/'
    cron
         目的：在指定节点上定义一个计划任务，每隔3分钟到主控端更新一次时间
         命令：ansible all -m cron -a 'name="job" minute=*/3 hour=* day=* month=* weekday=* job="/usr/sbin/ntpdate 172.16.254.139"'
    yum
        目的：在指定节点上安装 lrzsz 服务
        命令：ansible all -m yum -a "name=httpd state=present"
    service
        目的：启动指定节点上的 puppet 服务，并让其开机自启动
        命令：ansible 10.1.1.113 -m service -a 'name=puppet state=restarted enabled=yes'
    user
        目的：在指定节点上创建一个用户名为nolinux，组为nolinux的用户
        命令：ansible 10.1.1.113 -m user -a 'name=nolinux groups=nolinux state=present'
    group
        目的：在所有节点上创建一个组名为nolinux，gid为2014的组
        命令：ansible all -m group -a 'gid=2014 name=nolinux'
    file
        目的：更改指定节点上/tmp/t.sh的权限为755，属主和属组为root
        命令：ansible all -m file -a "dest=/tmp/t.sh mode=755 owner=root group=root"
    get_url模块：
        目的：将 http://10.1.1.116/favicon.ico 文件下载到指定节点的/tmp目录下
        命令：ansible 10.1.1.113 -m get_url -a 'url=http://10.1.1.116/favicon.ico dest=/tmp'
    synchronize模块：
        目的：将主控方/root/a目录推送到指定节点的/tmp目录下
        命令：ansible 10.1.1.113 -m synchronize -a 'src=/root/a dest=/tmp/ compress=yes'

一、ping模块
    测试主机是否是通的，用法很简单，不涉及参数：
    ansible test -m ping
二、setup模块
    setup模块，主要用于获取主机信息，在playbooks里经常会用到的一个参数gather_facts就与该模块相关。setup模块下经常使用的一个参数是filter参数，具体使用示例如下：
    ansible 10.212.52.252 -m setup -a 'filter=ansible_*_mb'   //查看主机内存信息
    ansible 10.212.52.252 -m setup -a 'filter=ansible_eth[0-2]'   //查看地接口为eth0-2的网卡信息
    ansible all -m setup --tree /tmp/facts   //将所有主机的信息输入到/tmp/facts目录下，每台主机的信息输入到主机名文件中（/etc/ansible/hosts里的主机名）
三、file模块
    file模块主要用于远程主机上的文件操作，file模块包含如下选项：
    force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no
    group：定义文件/目录的属组
    mode：定义文件/目录的权限
    owner：定义文件/目录的属主
    path：必选项，定义文件/目录的路径
    recurse：递归的设置文件的属性，只对目录有效
    src：要被链接的源文件的路径，只应用于state=link的情况
    dest：被链接到的路径，只应用于state=link的情况
    state：
    directory：如果目录不存在，创建目录
    file：即使文件不存在，也不会被创建
    link：创建软链接
    hard：创建硬链接
    touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间
    absent：删除目录、文件或者取消链接文件
    使用示例：
    ansible test -m file -a "src=/etc/fstab dest=/tmp/fstab state=link"
    ansible test -m file -a "path=/tmp/fstab state=absent"
    ansible test -m file -a "path=/tmp/test state=touch"
四、copy模块
    复制文件到远程主机，copy模块包含如下选项：
    backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no
    content：用于替代"src",可以直接设定指定文件的值
    dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录
    directory_mode：递归的设定目录的权限，默认为系统默认权限
    force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes
    others：所有的file模块里的选项都可以在这里使用
    src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用"/"来结尾，则只复制目录里的内容，如果没有使用"/"来结尾，则包含目录在内的整个内容全部复制，类似于rsync。
    validate ：The validation command to run before copying into place. The path to the file to validate is passed in via '%s' which must be present as in the visudo example below.
    示例如下：
    ansible test -m copy -a "src=/srv/myfiles/foo.conf dest=/etc/foo.conf owner=foo group=foo mode=0644"
    ansible test -m copy -a "src=/mine/ntp.conf dest=/etc/ntp.conf owner=root group=root mode=644 backup=yes"
    ansible test -m copy -a "src=/mine/sudoers dest=/etc/sudoers validate='visudo -cf %s'"
五、service模块
    用于管理服务
    该模块包含如下选项：
    arguments：给命令行提供一些选项
    enabled：是否开机启动 yes|no
    name：必选项，服务名称
    pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行
    runlevel：运行级别
    sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟
    state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）
    使用示例：
    ansible test -m service -a "name=httpd state=started enabled=yes"
    asnible test -m service -a "name=foo pattern=/usr/bin/foo state=started"
    ansible test -m service -a "name=network state=restarted args=eth0"
六、cron模块
    用于管理计划任务包含如下选项：
    backup：对远程主机上的原任务计划内容修改之前做备份
    cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划
    day：日（1-31，*，*/2,……）
    hour：小时（0-23，*，*/2，……）
    minute：分钟（0-59，*，*/2，……）
    month：月（1-12，*，*/2，……）
    weekday：周（0-7，*，……）
    job：要执行的任务，依赖于state=present
    name：该任务的描述
    special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly
    state：确认该任务计划是创建还是删除
    user：以哪个用户的身份执行
    示例：
    ansible test -m cron -a 'name="a job for reboot" special_time=reboot job="/some/job.sh"'
    ansible test -m cron -a 'name="yum autoupdate" weekday="2" minute=0 hour=12 user="root
    ansible test -m cron  -a 'backup="True" name="test" minute="0" hour="5,2" job="ls -alh > /dev/null"'
    ansilbe test -m cron -a 'cron_file=ansible_yum-autoupdate state=absent'
七、yum模块
    使用yum包管理器来管理软件包，其选项有：
    config_file：yum的配置文件
    disable_gpg_check：关闭gpg_check
    disablerepo：不启用某个源
    enablerepo：启用某个源
    name：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径
    state：状态（present，absent，latest）
    示例如下：
    ansible test -m yum -a 'name=httpd state=latest'
    ansible test -m yum -a 'name="@Development tools" state=present'
    ansible test -m yum -a 'name=http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm state=present'
八、user模块与group模块
    user模块是请求的是useradd, userdel, usermod三个指令，goup模块请求的是groupadd, groupdel, groupmod 三个指令。
    1、user模块
    home：指定用户的家目录，需要与createhome配合使用
    groups：指定用户的属组
    uid：指定用的uid
    password：指定用户的密码
    name：指定用户名
    createhome：是否创建家目录 yes|no
    system：是否为系统用户
    remove：当state=absent时，remove=yes则表示连同家目录一起删除，等价于userdel -r
    state：是创建还是删除
    shell：指定用户的shell环境
    使用示例：
    user: name=johnd comment="John Doe" uid=1040 group=admin
    user: name=james shell=/bin/bash groups=admins,developers append=yes user: name=johnd state=absent remove=yes
    user: name=james18 shell=/bin/zsh groups=developers expires=1422403387
    user: name=test generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa    #生成密钥时，只会生成公钥文件和私钥文件，和直接使用ssh-keygen指令效果相同，不会生成authorized_keys文件。
    注：指定password参数时，不能使用明文密码，因为后面这一串密码会被直接传送到被管理主机的/etc/shadow文件中，所以需要先将密码字符串进行加密处理。然后将得到的字符串放到password中即可。
    echo "123456" | openssl passwd -1 -salt $(< /dev/urandom tr -dc '[:alnum:]' | head -c 32) -stdin
    $1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0
    #使用上面的密码创建用户
    ansible all -m user -a 'name=foo password="$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0"'
    不同的发行版默认使用的加密方式可能会有区别，具体可以查看/etc/login.defs文件确认，centos 6.5版本使用的是SHA512加密算法。
    2、group示例
    ansible all -m group -a 'name=somegroup state=present'
九、synchronize模块
    使用rsync同步文件，其参数如下：
    archive: 归档，相当于同时开启recursive(递归)、links、perms、times、owner、group、-D选项都为yes ，默认该项为开启
    checksum: 跳过检测sum值，默认关闭
    compress:是否开启压缩
    copy_links：复制链接文件，默认为no ，注意后面还有一个links参数
    delete: 删除不存在的文件，默认no
    dest：目录路径
    dest_port：默认目录主机上的端口 ，默认是22，走的ssh协议
    dirs：传速目录不进行递归，默认为no，即进行目录递归
    rsync_opts：rsync参数部分
    set_remote_user：主要用于/etc/ansible/hosts中定义或默认使用的用户与rsync使用的用户不同的情况
    mode: push或pull 模块，push模的话，一般用于从本机向远程主机上传文件，pull 模式用于从远程主机上取文件
    使用示例：
    src=some/relative/path dest=/some/absolute/path rsync_path="sudo rsync"
    src=some/relative/path dest=/some/absolute/path archive=no links=yes
    src=some/relative/path dest=/some/absolute/path checksum=yes times=no
    src=/tmp/helloworld dest=/var/www/helloword rsync_opts=--no-motd,--exclude=.git mode=pull
十、filesystem模块
    在块设备上创建文件系统
    选项：
    dev：目标块设备
    force：在一个已有文件系统 的设备上强制创建
    fstype：文件系统的类型
    opts：传递给mkfs命令的选项
    示例：
    ansible test -m filesystem -a 'fstype=ext2 dev=/dev/sdb1 force=yes'
    ansible test -m filesystem -a 'fstype=ext4 dev=/dev/sdb1 opts="-cc"'
十一、mount模块
    配置挂载点
    选项：
    dump
    fstype：必选项，挂载文件的类型
    name：必选项，挂载点
    opts：传递给mount命令的参数
    src：必选项，要挂载的文件
    state：必选项
    present：只处理fstab中的配置
    absent：删除挂载点
    mounted：自动创建挂载点并挂载之
    umounted：卸载
    示例：
    name=/mnt/dvd src=/dev/sr0 fstype=iso9660 opts=ro state=present
    name=/srv/disk src='LABEL=SOME_LABEL' state=present
    name=/home src='UUID=b3e48f45-f933-4c8e-a700-22a159ec9077' opts=noatime state=present
    ansible test -a 'dd if=/dev/zero of=/disk.img bs=4k count=1024'
    ansible test -a 'losetup /dev/loop0 /disk.img'
    ansible test -m filesystem 'fstype=ext4 force=yes opts=-F dev=/dev/loop0'
    ansible test -m mount 'name=/mnt src=/dev/loop0 fstype=ext4 state=mounted opts=rw'
十二、get_url 模块
    该模块主要用于从http、ftp、https服务器上下载文件（类似于wget），主要有如下选项：
    sha256sum：下载完成后进行sha256 check；
    timeout：下载超时时间，默认10s
    url：下载的URL
    url_password、url_username：主要用于需要用户名密码进行验证的情况
    use_proxy：是事使用代理，代理需事先在环境变更中定义
    示例：
    get_url: url=http://example.com/path/file.conf dest=/etc/foo.conf mode=0440
    get_url: url=http://example.com/path/file.conf dest=/etc/foo.conf sha256sum=b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c
十三、unarchive模块
    用于解压文件，模块包含如下选项：
    copy：在解压文件之前，是否先将文件复制到远程主机，默认为yes。若为no，则要求目标主机上压缩包必须存在。
    creates：指定一个文件名，当该文件存在时，则解压指令不执行
    dest：远程主机上的一个路径，即文件解压的路径
    grop：解压后的目录或文件的属组
    list_files：如果为yes，则会列出压缩包里的文件，默认为no，2.0版本新增的选项
    mode：解决后文件的权限
    src：如果copy为yes，则需要指定压缩文件的源路径
    owner：解压后文件或目录的属主
    示例如下：
    - unarchive: src=foo.tgz dest=/var/lib/foo
    - unarchive: src=/tmp/foo.zip dest=/usr/local/bin copy=no
    - unarchive: src=https://example.com/example.zip dest=/usr/local/bin copy=no


playbook是由一个或多个“play”组成的列表。play的主要功能在于将事先归并为一组的主机装扮成事先通过ansible中的task定义好的角色。

一个简单的playbook配置如下：

- hosts: local
  remote_user: root
  tasks:
  - name: echo hi
    shell: echo "hi"